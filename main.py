import telebot
from telebot import types
from dotenv import load_dotenv
import threading
import time
from datetime import datetime
import os
import schedule 
from db_logic import DB_Manager

load_dotenv()

bot = telebot.TeleBot(os.getenv('TG_TOKEN'))
db_manager = DB_Manager(os.getenv('DATABASE'))


user_data = {}

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_reminder")
    btn2 = types.InlineKeyboardButton("üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="my_reminders")
    btn3 = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    markup.add(btn1, btn2)
    markup.add(btn3)
    return markup

def create_reminder_list_markup(reminders, user_id):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for reminder in reminders:
        reminder_id, title, description, date, time, is_sent = reminder
        status = "‚úÖ" if is_sent else "‚è∞"
        btn_text = f"{status} {title} - {date} {time}"
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"view_reminder_{reminder_id}"))
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    return markup

def create_reminder_actions_markup(reminder_id):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_reminder_{reminder_id}")
    btn2 = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_reminders")
    markup.add(btn1, btn2)
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )

@bot.message_handler(commands=['help'])
def help_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

‚ûï **–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ** - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üìã **–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚ùì **–ü–æ–º–æ—â—å** - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:** –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)
**–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:** –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)

–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!
    """
    bot.send_message(message.chat.id, help_text, reply_markup=create_main_menu(), parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = call.from_user.id
    
    if call.data == "add_reminder":
        user_data[user_id] = {"step": "title"}
        bot.edit_message_text(
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id
        )


    elif call.data == "my_reminders":
        reminders = db_manager.get_user_reminders(user_id)
        if reminders:
            bot.edit_message_text(
                "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_reminder_list_markup(reminders, user_id)
            )
        else:
            bot.edit_message_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_main_menu()
            )
    
    elif call.data == "help":
        help_text = """
ü§ñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

‚ûï **–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ** - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üìã **–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚ùì **–ü–æ–º–æ—â—å** - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:** –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)
**–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:** –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)

–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!
        """
        bot.edit_message_text(
            help_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_main_menu()
        )
    
    elif call.data == "back_to_menu":
        bot.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_main_menu()
        )
    
    elif call.data.startswith("view_reminder_"):
        reminder_id = int(call.data.split("_")[2])
        reminder = db_manager.get_reminder_by_id(reminder_id, user_id)
        if reminder:
            reminder_id, title, description, date, time = reminder
            text = f"üìå **{title}**\n\n"
            if description:
                text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            text += f"üìÖ –î–∞—Ç–∞: {date}\n‚è∞ –í—Ä–µ–º—è: {time}"
            
            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_reminder_actions_markup(reminder_id),
                parse_mode='Markdown'
            )
    
    elif call.data.startswith("delete_reminder_"):
        reminder_id = int(call.data.split("_")[2])
        db_manager.delete_reminder(reminder_id, user_id)
        bot.answer_callback_query(call.id, "üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        
        reminders = db_manager.get_user_reminders(user_id)
        if reminders:
            bot.edit_message_text(
                "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_reminder_list_markup(reminders, user_id)
            )
        else:
            bot.edit_message_text(
                "üì≠ –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_main_menu()
            )

@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=create_main_menu()
        )
        return
    
    user_step = user_data[user_id].get("step")
    
    if user_step == "title":
        user_data[user_id]["title"] = message.text
        user_data[user_id]["step"] = "description"
        bot.send_message(
            message.chat.id,
            "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
    
    elif user_step == "description":
        description = message.text if message.text != "-" else ""
        user_data[user_id]["description"] = description
        user_data[user_id]["step"] = "date"
        bot.send_message(
            message.chat.id,
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024):"
        )
    
    elif user_step == "date":
        try:
            date_obj = datetime.strptime(message.text, "%d.%m.%Y")
            if date_obj.date() < datetime.now().date():
                bot.send_message(
                    message.chat.id,
                    "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
                )
                return
            
            user_data[user_id]["date"] = message.text
            user_data[user_id]["step"] = "time"
            bot.send_message(
                message.chat.id,
                "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):"
            )
        except ValueError:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
    
    elif user_step == "time":
        try:
            time_obj = datetime.strptime(message.text, "%H:%M")
            
            reminder_date = datetime.strptime(user_data[user_id]["date"], "%d.%m.%Y").date()
            if reminder_date == datetime.now().date():
                reminder_time = time_obj.time()
                if reminder_time <= datetime.now().time():
                    bot.send_message(
                        message.chat.id,
                        "‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:"
                    )
                    return
            
            db_manager.add_reminder(
                user_id,
                user_data[user_id]["title"],
                user_data[user_id]["description"],
                user_data[user_id]["date"],
                message.text
            )
            
            del user_data[user_id]
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"üìå **{user_data.get(user_id, {}).get('title', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')}**\n"
                f"üìÖ {user_data.get(user_id, {}).get('date')}\n"
                f"‚è∞ {message.text}",
                reply_markup=create_main_menu(),
                parse_mode='Markdown'
            )
        except ValueError:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:"
            )

def check_reminders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminders = db_manager.get_pending_reminders()
    current_time = datetime.now()
    
    for reminder in reminders:
        reminder_id, user_id, title, description, date, time, *_ = reminder
        
        reminder_datetime = datetime.strptime(f"{date} {time}", "%d.%m.%Y %H:%M")
        
        if reminder_datetime <= current_time:
            text = f"üîî **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï**\n\nüìå {title}"
            if description:
                text += f"\nüìÑ {description}"
            
            try:
                bot.send_message(user_id, text, parse_mode='Markdown')
                db_manager.mark_reminder_sent(reminder_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def reminder_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    schedule.every().minute.do(check_reminders)
    
    while True:
        schedule.run_pending()
        time.sleep(30) 

if __name__ == "__main__":
    db_manager.create_tables()
    
    scheduler_thread = threading.Thread(target=reminder_scheduler, daemon=True)
    scheduler_thread.start()
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    bot.infinity_polling()
